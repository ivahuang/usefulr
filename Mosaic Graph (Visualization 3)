chart = {
  const innerHeight = height * data.names.length;

  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, innerHeight + margin.top + margin.bottom])
      .style("font", "10px sans-serif");

  svg.append("g")
      .attr("transform", `translate(0,${margin.top})`)
      .call(d3.axisTop(x).ticks(null, "d"))
      .call(g => g.select(".domain").remove());

  svg.append("g")
      .attr("transform", `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).tickSize(0))
      .call(g => g.select(".domain").remove());

  svg.append("g")
      .attr("transform", `translate(0,${innerHeight + margin.top + 4})`)
      .call(d3.axisBottom(x)
          .tickValues([data.year])
          .tickFormat(String)
          .tickSize(-innerHeight - 10))
      .call(g => g.select(".tick text")
          .clone()
          .attr("dy", "2em")
          .style("font-weight", "bold")
          .text("Measles vaccine introduced"))
      .call(g => g.select(".domain").remove());

  const row = svg.append("g")
    .selectAll("g")
    .data(data.values)
    .join("g")
      .attr("transform", (d, i) => `translate(0,${y(data.names[i])})`);

  row.selectAll("rect")
    .data(d => d)
    .join("rect")
      .attr("x", (d, i) => x(data.years[i]) + 1)
      .attr("width", (d, i) => x(data.years[i] + 1) - x(data.years[i]) - 1)
      .attr("height", y.bandwidth() - 1)
      .attr("fill", d => isNaN(d) ? "#eee" : d === 0 ? "#fff" : color(d))
    .append("title")
      .text((d, i) => `${format(d)} per 100,000 people in ${data.years[i]}`);

  return svg.node();
}
